#!/usr/bin/env python

import optparse
import sys
import languagemodel
import translationmodel
from collections import namedtuple


#run the input options

ioptions = optparse.OptionParser()
ioptions.add_option("-i","--input",dest="input",default="data/input",help="File containing sentences to translate (default= data / input)")
ioptions.add_option("-t","--translation-model", dest = "tm" ,default="data/tm", help="File containing translational model (default = data /tm)")
ioptions.add_option("-l","--language-model",dest="lm",default="data/lm",help="File containing language model (default = data /tm)")
ioptions.add_option("-k","--pruning",dest="prune",default=1,type="int",help="Pruning useful for  language model to filter best english word order (default = 1)")
ioptions.add_option("-s","--num-sentences",dest="num_sents",default=sys.maxint,type="int",help="Number of sentences to decode (default = max)")
ioptions.add_option("-v","--verbose",dest="verbose",default=False,action="store",help="Verbose mode (default = off) ")

opts = ioptions.parse_args()[0]

lm = languagemodel.LM(opts.lm)
tm = translationmodel.translationModel(opts.tm,opts.prune)


#readlines will read all lines in a list 
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]


# words which are not present in tm are added into tm
for word in set(sum(french,())):
    if (word,) not in tm:
        tm[(word,)]  = [translationmodel.phrase(word,0.0)] 



sys.stderr.write("Decoding starts for input %s.....\n"%(opts.input))  

for f in french:

    hypothesis = namedtuple("hypothesis","logprob,lm_state,precedence,phrase") 
    
    intial_hypothesis = hypothesis(0.0,lm.begin(),None,None)
    
    stacks  = [ {} for _ in f ] + [{}]
    
    stacks[0][lm.begin()] = intial_hypothesis

    for i,stack in enumerate(stacks[:-1]):
        for h in sorted(stack.itervalues(),key = lambda h : -h.logprob)[:opts.prune]:
            for j in xrange(i+1,len(f)+1):
                if f[i:j] in tm:
                    for phrase in tm[f[i:j]]:
                        logprob = h.logprob + phrase.logprob
                        lmstate = h.lm_state
                        for word in phrase.english.split():
                            (lm_state,lm_score) = lm.score(lmstate,word)
                            logprob += lm_score
                        logprob += lm.end(lm_state) if j == len(f) else 0.0
                        new_hypothesis = hypothesis(logprob,lm_state,h,phrase)
                    if lm_state not in stacks[j] or stacks[j][lm_state].logprob < logprob:
                        stacks[j][lm_state] = new_hypothesis
    winner = max(stacks[-1].itervalues() , key = lambda h : h.logprob )
    
    def extract_english(h):
        return "" if h.precedence is None else "%s%s" %(extract_english(h.precedence),h.phrase.english)
    print extract_english(winner)



if opts.verbose:
    def store():
        print "Still working on it "




