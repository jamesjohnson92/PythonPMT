#!/usr/bin/env python
import optparse
import sys

optparser = optparse.OptionParser()
optparser.add_option("-d","--data",dest="corpora",default="data/corpora",help="Default Location for corpora")
optparser.add_option("-f","--target",dest="target",default="e",help="Suffix for the target language")
optparser.add_option("-s","--source",dest="source",default="f",help="Suffix for the source language")


#parse the arguments
(options,args) = optparser.parse_args()

#attach the suffix for target and source
target_data = open("%s.%s" % (options.corpora,options.target))
source_data = open("%s.%s" % (options.corpora,options.source))

for (n,(source,target,align)) in enumerate(zip(source_data,target_data,sys.stdin)):
  source_length =len(source.strip().split())
  target_length = len(target.strip().split())
  try:
     alignment = set([ tuple(map(int , x.split("-")))  for x in align.strip().split() ])
     #(24,12) source word position 24 and target word position 12
     for (i,j) in alignment:
       if ( i >= source_length or j >= target_length ):
           sys.stderr.write("Warning (%s) : Sentence %d, point(%d,%d) is not a valid link \n" % (sys.argv[0],n,i,j))
       pass
          
  except (Exception):
      sys.stderr.write("ERROR (%s) Line(%d) is not formatted correctly: \n  %s" % (sys.argv[0],n,align))
      sys.stderr.write(" Lines can contain only tokens \"i-j\", where i and j are integer indexes into the source and target sentences.\n")
      sys.exit(1)
  sys.stdout.write(align)

warned = False
for a in (sys.stdin):
    if not warned:
        warned = True
        sys.stdout.write(a)

try:
    if ( source_data.next()):
        sys.stderr.write("Warning (%s) : bitext is longer than alignment \n" % sys.argv[0])
except (StopIteration):
    pass

