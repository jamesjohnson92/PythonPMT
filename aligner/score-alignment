#!/usr/bin/env python
import optparse
import sys

optparser = optparse.OptionParser()
optparser.add_option("-d","--data",dest="data",default="data/corpora",help="Data filename prefix(default=data)")
optparser.add_option("-t","--target",dest="target",default="e",help="Suffix for target corpora (default = e)")
optparser.add_option("-s","--source",dest="source",default="f",help="Suffix for source corpora (default = f)")
optparser.add_option("-a","--alignment",dest="alignment",default="a",help="Suffix for alignment (default = a) ")
optparser.add_option("-n","--number",dest="num",default=sys.maxint,help="Number of alignments to be printed (default = 3)")


(options,args)=optparser.parse_args()

#First Take the data
source_data = "%s.%s" % (options.data,options.source)
target_data = "%s.%s" % (options.data,options.target)
alignment_data = "%s.%s" % (options.data,options.alignment)

#calculate the statistics
(size_a,size_s,size_a_and_s,size_a_and_p) = (0.0,0.0,0.0,0.0)

for (n,(s,t,g,a)) in enumerate(zip(open(source_data),open(target_data),open(alignment_data),sys.stdin)):
    swords = s.strip().split()
    twords = t.strip().split()
    sure = set([tuple(map(int,x.split("-"))) for x in filter( lambda x:x.find("-") > -1 , g.strip().split())])
    possible = set([tuple(map(int,x.split("?")))  for x in filter(lambda x:x.find("?") > -1,g.strip().split()) ])
    alignment = set([tuple(map(int,x.split("-"))) for x in a.strip().split()])

    size_a += len(alignment)
    size_s += len(sure)
    size_a_and_s += len(alignment & sure)
    size_a_and_p += len(alignment & possible) + len(alignment & sure)
    if ( n < options.num ) :
        sys.stdout.write("Alignment %i KEY: ( ) => guessed , * = sure , ? => possible\n" %(n))
        sys.stdout.write("  ")
        for j in twords:
            sys.stdout.write("---")
        sys.stdout.write("\n")
        for (i,s_w) in enumerate(swords):
            sys.stdout.write("| ")
            for (j,_) in enumerate(twords):
                (left,right) = ("(",")") if (i,j) in alignment else (" "," ")
                align_s_p = "*"  if (i,j) in sure else  "?" if (i,j) in possible else " "
                sys.stdout.write("%s%s%s" %(left,align_s_p,right))
            sys.stdout.write(" |")
            sys.stdout.write("%s\n" %(s_w))
        sys.stdout.write("\n")
        sys.stdout.write("  ")
        for j in twords:
            sys.stdout.write("---")
        sys.stdout.write("\n")
        for i in range(max(map(len,twords))):
            sys.stdout.write(" ")
            for word in twords:
                char = word[i] if len(word) > i else " "
                sys.stdout.write("  %s" %(char))
            sys.stdout.write("\n")
        sys.stdout.write("\n")

precision = size_a_and_p / size_a
recall = size_a_and_s / size_s
aer = 1 - ((size_a_and_s + size_a_and_p) / (size_a + size_s))
sys.stdout.write("Precision=%f\n Recall=%f\nAER=%f\n" % ( precision,recall,aer))

for _ in (sys.stdin):
    pass

